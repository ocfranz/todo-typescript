{"version":3,"sources":["modules/Header/styles.ts","components/IconButton/styles.ts","components/IconButton/IconButton.tsx","modules/Header/PlusIcon.js","modules/Header/Header.tsx","components/Heading/styles.ts","components/Heading/Heading.tsx","components/TodoListItem/CircleIcon.js","components/TodoListItem/CompletedIcon.js","components/TodoListItem/styles.ts","components/TodoListItem/TodoListItem.tsx","components/Editable/Editable.ts","modules/ModalAdd/CalendarIcon.js","modules/ModalAdd/ClockIcon.js","modules/ModalAdd/CloseIcon.js","modules/ModalAdd/SaveIcon.js","components/TaskItemRow/styles.ts","components/TaskItemRow/TaskItemRow.tsx","styles/Breakpoints.ts","modules/ModalAdd/styles.ts","components/Calendar/styles.ts","components/Calendar/Calendar.tsx","helpers/preventClickOutside.ts","modules/ModalDate/styles.ts","modules/ModalDate/ModalDate.tsx","modules/ModalAdd/ModalAdd.tsx","components/SimpleGrid/styles.ts","components/SimpleGrid/SimpleGrid.tsx","components/EmptyDisplay/styles.ts","components/EmptyDisplay/EmptyDisplay.tsx","helpers/filterTasks.ts","helpers/getDateFromKeyword.ts","pages/Home/Home.tsx","App.tsx","styles/GlobalStyles.ts","reducers/tasksReducer.ts","reducers/uiReducer.ts","reducers/index.ts","stores/store.ts","serviceWorker.ts","index.tsx"],"names":["HeaderWrapper","styled","div","IconButtonStyled","button","IconButton","children","handleOnClick","onClick","PlusCircle","size","color","style","cursor","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","x1","y1","x2","y2","Header","addTask","dispatch","useDispatch","visibleModal","useSelector","state","uiReducer","showModalAdd","PlusIcon","type","payload","HeadingStyled","span","props","HeadingWrapper","Heading","Circle","CompletedIcon","d","TodoListItemWrapper","CheckBox","TodoTitleStyled","TodoDateStyled","TodoEstimatedStyled","ButtonControls","visible","TodoListItem","id","text","completed","date","estimated","useState","exposeControls","key","onMouseEnter","event","onMouseLeave","onDoubleClick","isCompleted","CircleIcon","defaultProps","Editable","attrs","contentEditable","spellCheck","onInput","placeholder","Calendar","x","y","rx","ry","Clock","points","X","Save","TaskItem","TaskItemTag","TaskItemName","TaskItemAction","TaskItemButton","TimeInput","input","TaskItemRow","icon","handleOnButtonClick","childrenModal","value","handleOnContentChange","taskEstimated","setTaskEstimated","opacity","onChange","target","estimatedTime","parseInt","isNaN","media","ModalWrapper","ModalDialog","ModalContent","ModalContainer","ModalHeader","ModalFooter","ModalBody","TaskHeading","CalendarWrapper","handleOnChange","Date","className","preventClickOutside","ref","current","contains","ModalDateStyled","ModalDateWrapper","DateInputWrapper","DateInput","ModalDate","onClickOutside","modalDate","useRef","setDate","useEffect","document","addEventListener","handleClickOutside","removeEventListener","readOnly","getDate","getMonth","getFullYear","ModalAdd","visibleModalDate","setVisibleModalDate","newTask","setNewTask","titleRef","modalDialog","taskDate","setTaskDate","tasks","tasksReducer","handleOnClose","SaveIcon","length","replace","innerHTML","CloseIcon","fontSize","fontWeight","position","handleOnInput","CalendarIcon","handleOnClickOutsideDate","ClockIcon","toString","time","handleOnEstimatedClick","textAlign","GridBasic","GridExtended","SimpleGrid","EmptyStyled","EmptyStrong","EmptyMessage","EmptyDisplay","dayName","filterTasks","keyword","today","Error","getDateFromKeyword","filter","item","splitedDate","split","App","Helmet","rel","href","task","temp","map","push","drawTodayTasks","drawTomorrowTasks","exact","path","component","Home","GlobalStyles","createGlobalStyle","initialState","initialStateUi","showModalDate","rootReducer","combineReducers","action","Object","assign","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4921c0e1.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst HeaderWrapper = styled.div`\n    display: flex;\n    height: 60px;\n    text-align: center;\n    justify-content: center;\n    align-items: center;\n    font-weight: 700;\n    font-size: 30px;\n    padding-top: 30px;\n    justify-content: space-between;\n`;\n\nconst IconWrapper = styled.div`\n    padding-top: 2px;\n`;\nexport { HeaderWrapper, IconWrapper };\n","import styled from \"styled-components\";\n\nconst IconButtonStyled = styled.button`\n    padding: 0;\n    margin: 0px 10px 0px 0px;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n    &:focus{\n        outline : none;\n        box-shadow : none;\n    }\n`;\n\nexport { IconButtonStyled };\n","import React, { FC } from \"react\";\nimport { IconButtonStyled } from \"./styles\";\n\ninterface IconButtonProps {\n    children: any;\n    handleOnClick: () => void;\n}\n\nconst IconButton: FC<IconButtonProps> = ({ children, handleOnClick }) => {\n    return (\n        <IconButtonStyled onClick={handleOnClick}>{children}</IconButtonStyled>\n    );\n};\n\nexport default IconButton;\n","import React from \"react\";\nconst PlusCircle = ({ size = 37, color = \"#3720C0\" }) => (\n    <svg\n        style={{cursor :\" pointer\"}}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill={color}\n        stroke=\"#FFFFFF\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"arcs\"\n    >\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line>\n        <line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n    </svg>\n);\nexport default PlusCircle;\n","import React, { FC } from \"react\";\nimport { HeaderWrapper } from \"./styles\";\nimport { RootState } from \"../../reducers\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport IconButton from \"../../components/IconButton/IconButton\";\nimport PlusIcon from \"./PlusIcon.js\";\ninterface HeaderProps {\n    addTask(task: string): void;\n}\nconst Header: FC<HeaderProps> = ({ addTask }) => {\n    const dispatch = useDispatch();\n    const visibleModal = useSelector(\n        (state: RootState) => state.uiReducer.showModalAdd\n    );\n    const handleOnClick = () => {\n        dispatch({ type: \"SHOW_MODAL_ADD\", payload: !visibleModal });\n    };\n    return (\n        <HeaderWrapper>\n            <span>Simple Todo</span>\n            <IconButton children={<PlusIcon />} handleOnClick={handleOnClick} />\n        </HeaderWrapper>\n    );\n};\n\nexport default Header;\n","import styled from \"styled-components\";\n\nconst HeadingStyled = styled.span<{ type: string }>`\n    font-weight: 700;\n    opacity : 0.7;\n    font-size: ${(props) => (props.type === \"h1\" ? \"30px\" : \"24px\")};\n`;\nconst HeadingWrapper = styled.div`\n    margin: 20px 0px;\n`;\n\nexport { HeadingStyled, HeadingWrapper };\n","import React, { FC } from \"react\";\nimport { HeadingStyled, HeadingWrapper} from './styles';\n\ninterface HeadingProps {\n    type: string;\n    children?: string;\n}\n\nconst Heading: FC<HeadingProps> = ({ type, children }) => {\n    return (\n        <HeadingWrapper>\n            <HeadingStyled type={type}>{children}</HeadingStyled>\n        </HeadingWrapper>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nconst Circle = ({ size = 35, color = \"#aca8b8\" }) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"#FFFFFF\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n    >\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n    </svg>\n);\nexport default Circle;\n\n","import React from \"react\";\n\nconst CompletedIcon = ({ size = 35, color = \"#48D7A9\" }) => {\n    return (\n        <svg\n            width={size}\n            height={size}\n            viewBox=\"0 0 29 29\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n        >\n            <path\n                d=\"M14.5 0.28125C6.65986 0.28125 0.28125 6.65986 0.28125 14.5C0.28125 22.3401 6.65986 28.7188 14.5 28.7188C22.3401 28.7188 28.7188 22.3401 28.7188 14.5C28.7188 6.65986 22.3401 0.28125 14.5 0.28125ZM21.8999 9.73467L12.7124 20.6722C12.6116 20.7922 12.4862 20.8892 12.3447 20.9565C12.2032 21.0239 12.0488 21.06 11.8921 21.0625H11.8736C11.7203 21.0624 11.5687 21.0302 11.4287 20.9677C11.2887 20.9053 11.1634 20.8142 11.0608 20.7002L7.12334 16.3252C7.02334 16.2191 6.94555 16.0942 6.89455 15.9576C6.84354 15.821 6.82034 15.6757 6.82632 15.53C6.8323 15.3844 6.86733 15.2414 6.92936 15.1095C6.99139 14.9776 7.07916 14.8594 7.18751 14.7619C7.29586 14.6644 7.42262 14.5895 7.56032 14.5417C7.69802 14.4938 7.84389 14.474 7.98936 14.4834C8.13483 14.4927 8.27696 14.5311 8.4074 14.5962C8.53784 14.6612 8.65396 14.7517 8.74893 14.8623L11.8449 18.3021L20.2251 8.32783C20.4131 8.1105 20.679 7.97588 20.9655 7.95305C21.2519 7.93023 21.5358 8.02104 21.7558 8.20586C21.9759 8.39067 22.1143 8.65465 22.1413 8.94073C22.1682 9.22681 22.0815 9.512 21.8999 9.73467V9.73467Z\"\n                fill={color}\n            />\n        </svg>\n    );\n};\n\nexport default CompletedIcon;\n","import styled from \"styled-components\";\r\nconst TodoListItemWrapper = styled.div<{ key: any }>`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    color: #686088;\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n    margin: 15px 0px;\r\n    position: relative;\r\n    cursor: pointer;\r\n`;\r\nconst CheckBox = styled.div`\r\n    border-radius: 50%;\r\n    width: 35px;\r\n    height: 35px;\r\n    margin-right: 10px;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n`;\r\nconst TodoTitleStyled = styled.div`\r\n    width: 60%;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst TodoDateStyled = styled.div`\r\n    width: 25%;\r\n    text-align: right;\r\n    opacity: 0.7;\r\n    font-size: 16px;\r\n`;\r\nconst TodoEstimatedStyled = styled.div`\r\n    width: 15%;\r\n    text-align: right;\r\n    opacity: 0.7;\r\n    font-size: 16px;\r\n`;\r\n\r\nconst ButtonControls = styled.div<{ visible: boolean }>`\r\n    margin-left: 10px;\r\n    width: 35px;\r\n    height: 35px;\r\n    display: ${(props) => (props.visible ? \"block\" : \"none\")};\r\n`;\r\n\r\nexport {\r\n    TodoListItemWrapper,\r\n    CheckBox,\r\n    TodoTitleStyled,\r\n    TodoDateStyled,\r\n    TodoEstimatedStyled,\r\n    ButtonControls,\r\n};\r\n","import React, { FC, useState } from \"react\";\nimport CircleIcon from \"./CircleIcon\";\nimport CompletedIcon from \"./CompletedIcon\";\nimport { useDispatch } from \"react-redux\";\nimport {\n    TodoListItemWrapper,\n    CheckBox,\n    TodoTitleStyled,\n    TodoDateStyled,\n    TodoEstimatedStyled,\n    ButtonControls,\n} from \"./styles\";\n\ninterface TodoListItemProps {\n    completed?: boolean;\n    id?: number;\n    text: string;\n    date: string;\n    estimated: number;\n}\n\nconst TodoListItem: FC<TodoListItemProps> = ({\n    id,\n    text,\n    completed,\n    date,\n    estimated,\n}) => {\n    const dispatch = useDispatch();\n\n    const [exposeControls, setExposeControls] = useState(false);\n    const handleOnClickCheck = () => {\n        let isCompleted = !completed;\n        dispatch({\n            type: \"UPDATE_TASK\",\n            payload: { id, text, isCompleted, date },\n        });\n    };\n    const handleOnHover = (event: any) => {\n        //setExposeControls(!exposeControls);\n    };\n    const handleOnDoubleClick = (event: any) => {};\n    return (\n        <TodoListItemWrapper\n            key={id}\n            onMouseEnter={(event) => handleOnHover(event)}\n            onMouseLeave={(event) => handleOnHover(event)}\n            onDoubleClick={(event) => handleOnDoubleClick(event)}\n        >\n            <TodoTitleStyled>\n                <CheckBox onClick={handleOnClickCheck}>\n                    {completed ? <CompletedIcon /> : <CircleIcon />}\n                </CheckBox>\n                {text}\n            </TodoTitleStyled>\n            <TodoDateStyled>{date}</TodoDateStyled>\n            <TodoEstimatedStyled>{`${estimated} min`}</TodoEstimatedStyled>\n            <ButtonControls visible={exposeControls}>...</ButtonControls>\n        </TodoListItemWrapper>\n    );\n};\n\nTodoListItem.defaultProps = {\n    completed: false,\n};\n\nexport default TodoListItem;\n","import styled from 'styled-components';\n\nconst Editable = styled.div.attrs(props =>({\n        contentEditable : true,\n        spellCheck : false,\n        onInput : props.onInput,\n        placeholder : props.placeholder || \"Type here\"\n    }))`\n    max-width: 100%; \n    width: 100%; \n    outline: none;\n    padding: 2px 0px;\n`;\n\nexport default Editable;\n","import React from \"react\";\nconst Calendar = ({ size = 35, color = \"#aca8b8\" }) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"arcs\"\n    >\n        <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n        <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n        <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n        <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n    </svg>\n);\nexport default Calendar;\n","import React from \"react\";\nconst Clock = ({ size = 35, color = \"#aca8b8\" }) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"arcs\"\n    >\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n        <polyline points=\"12 6 12 12 16 14\"></polyline>\n    </svg>\n);\nexport default Clock;\n","import React from \"react\";\nconst X = ({ size = 35, color = \"#aca8b8\" }) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"arcs\"\n    >\n        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n    </svg>\n);\nexport default X;\n","import React from \"react\";\nconst Save = ({ size = 35, color = \"#aca8b8\" }) => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"arcs\"\n    >\n        <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n        <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n        <polyline points=\"7 3 7 8 15 8\"></polyline>\n    </svg>\n);\nexport default Save;\n","import styled from \"styled-components\";\nimport { media } from \"../../styles/Breakpoints\";\n\nconst TaskItem = styled.div`\n    display: flex;\n    align-items: center;\n    padding: 10px 0px;\n`;\nconst TaskItemTag = styled.div`\n    align-items: center;\n    display: flex;\n    width: 20%;\n`;\nconst TaskItemName = styled.span`\n    font-size: 15px;\n    opacity: 0.8;\n    margin-left: 10px;\n`;\nconst TaskItemAction = styled.div`\n    width: 80%;\n`;\n\nconst TaskItemButton = styled.div`\n    text-align: left;\n    padding: 10px 0px 10px 10px;\n    cursor: pointer;\n    &:hover {\n        background-color: rgba(0, 0, 0, 0.3);\n    }\n`;\n\nconst TimeInput = styled.input`\n    font-size: 16px;\n    border: none;\n    outline: none;\n    box-shadow: none;\n    background-color: transparent;\n    opacity: 0.8;\n    padding: 0;\n    &:focus {\n        outline: none;\n        box-shadow: none;\n    }\n`;\n\nexport {\n    TaskItem,\n    TaskItemTag,\n    TaskItemAction,\n    TaskItemButton,\n    TaskItemName,\n    TimeInput,\n};\n","import React, { FC, useState } from \"react\";\n\nimport {\n    TaskItem,\n    TaskItemTag,\n    TaskItemButton,\n    TaskItemName,\n    TaskItemAction,\n    TimeInput,\n} from \"./styles\";\n\ninterface TaskItemRowProps {\n    icon: any;\n    children: string;\n    handleOnButtonClick: () => void;\n    childrenModal?: React.Component | any;\n    value?: string;\n    type?: string;\n    handleOnContentChange: (time: number) => void;\n}\n\nconst TaskItemRow: FC<TaskItemRowProps> = ({\n    icon,\n    children,\n    handleOnButtonClick,\n    childrenModal,\n    value,\n    type,\n    handleOnContentChange,\n}) => {\n    const [taskEstimated, setTaskEstimated] = useState(0);\n    const handleOnChange = (event: any) => {\n        setTaskEstimated(event.target.value)\n        const estimatedTime = parseInt(event.target.value);\n        if (!isNaN(estimatedTime)) {\n            handleOnContentChange(estimatedTime);\n        }\n      \n    };\n    return (\n        <TaskItem>\n            <TaskItemTag>\n                {icon}\n                <TaskItemName>{children}</TaskItemName>\n            </TaskItemTag>\n            <TaskItemAction>\n                <TaskItemButton onClick={handleOnButtonClick}>\n                    {type === \"date\" && (\n                        <span style={{ opacity: \"0.5\" }}>\n                            {value === \"\" || value=== \"0\" ? \"Empty\" : value}\n                        </span>\n                    )}\n                    {type === \"time\" && (\n                        <TimeInput\n                            placeholder=\"Empty\"\n                            onChange={handleOnChange}\n                            value={taskEstimated === 0 ? \"\" : taskEstimated}\n                        />\n                    )}\n                </TaskItemButton>\n                {childrenModal}\n            </TaskItemAction>\n        </TaskItem>\n    );\n};\n\nTaskItemRow.defaultProps = {\n    value: \"Empty\",\n    type: \"date\",\n};\n\nexport default TaskItemRow;\n","const media = {\n    xs: `(min-width: 480px)`,\n    sm: \"(min-width: 768px)\",\n    md: \"(min-width: 992px)\",\n    lg: \"(min-width: 1200px)\",\n};\n\nexport { media};\n","import styled from \"styled-components\";\nimport { media } from \"../../styles/Breakpoints\";\n\nconst ModalWrapper = styled.div<{ visible: boolean }>`\n    display: ${(props) => (props.visible ? \"flex\" : \"none\")};\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    background: rgba(0, 0, 0, 0.3);\n    height: 100%;\n    align-items: center;\n    z-index: 99;\n`;\nconst ModalDialog = styled.div`\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background-color: #ffffff;\n    @media ${media.md} {\n        max-width: 900px;\n        max-height: 400px;\n        margin: auto auto;\n        height: calc(100% - 144px);\n    }\n`;\nconst ModalContent = styled.div`\n    overflow-y: auto;\n    height: 100%;\n    width: 100%;\n`;\n\nconst ModalContainer = styled.div``;\n\nconst ModalHeader = styled.div`\n    padding: 10px 20px;\n    font-size: 15px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\nconst ModalFooter = styled.div`\n    text-align: center;\n`;\nconst ModalBody = styled.div`\n    text-align: center;\n    padding: 20px 20px;\n    @media ${media.md} {\n        padding: 20px 100px;\n    }\n`;\n\nconst TaskHeading = styled.div`\n    display: flex;\n    text-align: left;\n    flex-wrap: nowrap;\n    align-items: center;\n`;\n\nexport {\n    ModalWrapper,\n    ModalDialog,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    ModalContainer,\n    TaskHeading,\n};\n","import styled from \"styled-components\";\n\nconst CalendarWrapper = styled.div`\n    width: 100%;\n`;\n\n\nexport { CalendarWrapper};\n","import React, { FC } from \"react\";\nimport \"./CustomCalendar.css\";\nimport CalendarLibrary from \"react-calendar\";\nimport { CalendarWrapper } from \"./styles\";\n\ninterface CalendarProps {\n    handleOnChange: (date: any) => void;\n}\n\nconst Calendar: FC<CalendarProps> = ({ handleOnChange }) => {\n    const handleCalendarChange = (date: any) => {\n        handleOnChange(date);\n    };\n\n    return (\n        <CalendarWrapper>\n            <CalendarLibrary\n                value={new Date()}\n                onChange={handleCalendarChange}\n                className=\"calendar\"\n            />\n        </CalendarWrapper>\n    );\n};\n\nexport default Calendar;\n","const preventClickOutside = (ref : any,event : any)=>{\n    if (!ref.current.contains(event.target)) return true\n    return false\n    \n}\n\nexport {preventClickOutside};","import styled from \"styled-components\";\n\nconst ModalDateStyled = styled.div<{ visible: boolean }>`\n    display: ${(props) => (props.visible ? \"flex\" : \" none\")};\n    position: absolute;\n    width: 250px;\n    height: 350px;\n    top: 25%;\n    z-index: 999;\n    background-color: #ffffff;\n    -webkit-box-shadow: 0px 0px 10px 0.5px rgba(196, 192, 196, 1);\n    -moz-box-shadow: 0px 0px 10px 0.5px rgba(196, 192, 196, 1);\n    box-shadow: 0px 0px 10px 0.5px rgba(196, 192, 196, 1);\n    flex-wrap: wrap;\n`;\nconst ModalDateWrapper = styled.div`\n    padding: 10px 20px;\n    width: 100%;\n`;\n\nconst DateInputWrapper = styled.div`\n    width: 100%;\n    display: flex;\n`;\n\nconst DateInput = styled.input`\n    width: 100%;\n    padding: 2px 0px;\n    font-size: 18px;\n    border: 1px solid;\n    background: rgba(242, 241, 238, 0.6);\n    &:focus {\n        outline: none;\n        box-shadow: none;\n    }\n`;\n\nexport { ModalDateStyled, ModalDateWrapper, DateInputWrapper, DateInput };\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport Calendar from \"../../components/Calendar/Calendar\";\nimport { preventClickOutside } from \"../../helpers/preventClickOutside\";\nimport {\n    ModalDateStyled,\n    ModalDateWrapper,\n    DateInputWrapper,\n    DateInput,\n} from \"./styles\";\n\ninterface ModalDate {\n    visible: boolean;\n    onClickOutside: (date: string) => void;\n}\n\nconst ModalDate: FC<ModalDate> = ({ visible, onClickOutside }) => {\n    const modalDate = useRef(null);\n    const [date, setDate] = useState(\"\");\n    useEffect(() => {\n        if (visible) {\n            document.addEventListener(\"click\", handleClickOutside, true);\n        }\n    });\n\n    const handleClickOutside = (event: any) => {\n        if (preventClickOutside(modalDate, event)) {\n            document.removeEventListener(\"click\", handleClickOutside, true);\n            onClickOutside(date);\n        }\n    };\n\n    const handleOnCalendarChange = (date: any) => {\n        setDate(\n            `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`\n        );\n    };\n\n    return (\n        <ModalDateStyled visible={visible} ref={modalDate}>\n            <ModalDateWrapper>\n                <DateInputWrapper>\n                    <DateInput readOnly={true} value={date} />\n                </DateInputWrapper>\n                <div>\n                    <Calendar handleOnChange={handleOnCalendarChange} />\n                </div>\n            </ModalDateWrapper>\n        </ModalDateStyled>\n    );\n};\n\nexport default ModalDate;\n","import React, { FC, useState, useEffect, useRef } from \"react\";\nimport CircleIcon from \"../../components/TodoListItem/CircleIcon\";\nimport Editable from \"../../components/Editable/Editable\";\nimport { RootState } from \"../../reducers\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CalendarIcon from \"./CalendarIcon\";\nimport ClockIcon from \"./ClockIcon\";\nimport CloseIcon from \"./CloseIcon\";\nimport SaveIcon from \"./SaveIcon\";\nimport TaskItemRow from \"../../components/TaskItemRow/TaskItemRow\";\nimport IconButton from \"../../components/IconButton/IconButton\";\nimport {\n    ModalWrapper,\n    ModalDialog,\n    ModalContent,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    TaskHeading,\n    ModalContainer,\n} from \"./styles\";\nimport ModalDate from \"../ModalDate/ModalDate\";\nimport { preventClickOutside } from \"../../helpers/preventClickOutside\";\nimport { Task } from \"../../reducers/tasksReducer\";\ninterface ModalAddProps {\n    visible: boolean;\n}\n\nconst ModalAdd: FC<ModalAddProps> = ({ visible }) => {\n    const [visibleModalDate, setVisibleModalDate] = useState(false);\n    const [newTask, setNewTask] = useState(\"\");\n    const titleRef: any = useRef(null);\n    const modalDialog: any = useRef(null);\n    const [taskDate, setTaskDate] = useState(\"\");\n    const [taskEstimated, setTaskEstimated] = useState(0);\n\n    const dispatch = useDispatch();\n    const visibleModal = useSelector(\n        (state: RootState) => state.uiReducer.showModalAdd\n    );\n    const tasks = useSelector((state: RootState) => state.tasksReducer.tasks);\n\n    useEffect(() => {\n        if (visibleModal) {\n            document.addEventListener(\"click\", handleClickOutside, true);\n        }\n    });\n    const handleClickOutside = (event: any) => {\n        if (preventClickOutside(modalDialog, event)) {\n            handleOnClose();\n        }\n    };\n    const handleOnClose = () => {\n        document.removeEventListener(\"click\", handleClickOutside, true);\n        dispatch({ type: \"SHOW_MODAL_ADD\", payload: !visibleModal });\n    };\n    const handleOnAdd = () => {\n        let payload: Task = {\n            id: tasks.length + 1,\n            text: newTask.replace(/&nbsp;/g, \"\"),\n            isCompleted: false,\n            date: taskDate,\n            estimated: taskEstimated,\n        };\n        setNewTask(\"\");\n        titleRef.current.innerHTML = \"\";\n        handleOnClose();\n        setVisibleModalDate(false);\n        setTaskDate(\"\");\n        setTaskEstimated(0);\n        dispatch({ type: \"ADD_TASK\", payload });\n    };\n\n    const handleOnInput = (event: any) => {\n        setNewTask(event.target.innerHTML);\n    };\n\n    const handleOnDateClick = () => {\n        setVisibleModalDate(!visibleModalDate);\n    };\n    const handleOnEstimatedClick = (time: number) => {\n        setTaskEstimated(time);\n    };\n\n    const handleOnClickOutsideDate = (date: string) => {\n        setTaskDate(date);\n        setVisibleModalDate(!visibleModalDate);\n    };\n    return (\n        <ModalWrapper visible={visible}>\n            <ModalDialog ref={modalDialog}>\n                <ModalContent>\n                    <ModalContainer>\n                        <ModalHeader>\n                            <span style={{ opacity: \"0.5\" }}>Add new task</span>\n                            <div>\n                                <IconButton\n                                    children={<SaveIcon size={25} />}\n                                    handleOnClick={handleOnAdd}\n                                />\n                                <IconButton\n                                    children={<CloseIcon size={25} />}\n                                    handleOnClick={handleOnClose}\n                                />\n                            </div>\n                        </ModalHeader>\n                        <ModalBody>\n                            <TaskHeading>\n                                <div style={{ width: \"40px\" }}>\n                                    <CircleIcon />\n                                </div>\n                                <div\n                                    style={{\n                                        width: \"calc(100% - 40px )\",\n                                        fontSize: \"25px\",\n                                        fontWeight: \"bold\",\n                                        position: \"relative\",\n                                    }}\n                                >\n                                    <Editable\n                                        onInput={(event) =>\n                                            handleOnInput(event)\n                                        }\n                                        ref={titleRef}\n                                        placeholder=\"Task title\"\n                                    />\n                                </div>\n                            </TaskHeading>\n                            <TaskItemRow\n                                icon={<CalendarIcon size={25} />}\n                                children=\"Date\"\n                                value={taskDate}\n                                handleOnButtonClick={handleOnDateClick}\n                                childrenModal={\n                                    <ModalDate\n                                        visible={visibleModalDate}\n                                        onClickOutside={(date) =>\n                                            handleOnClickOutsideDate(date)\n                                        }\n                                    />\n                                }\n                                handleOnContentChange={() => {}}\n                            />\n\n                            <TaskItemRow\n                                icon={<ClockIcon size={25} />}\n                                type=\"time\"\n                                children=\"Estimated\"\n                                value={taskEstimated.toString()}\n                                handleOnButtonClick={() => {}}\n                                handleOnContentChange={(time) =>\n                                    handleOnEstimatedClick(time)\n                                }\n                            />\n                            <hr></hr>\n                            <div\n                                style={{\n                                    textAlign: \"left\",\n                                    position: \"relative\",\n                                }}\n                            >\n                                <Editable placeholder=\"Add description\" />\n                            </div>\n                        </ModalBody>\n                        <ModalFooter></ModalFooter>\n                    </ModalContainer>\n                </ModalContent>\n            </ModalDialog>\n        </ModalWrapper>\n    );\n};\n\nexport default ModalAdd;\n","import styled from \"styled-components\";\r\nimport { media } from \"../../styles/Breakpoints\";\r\n\r\nconst GridBasic= styled.div`\r\n    padding: 0px 20px;\r\n    @media ${media.sm} {\r\n        margin: 0px 150px;\r\n    }\r\n    @media ${media.md} {\r\n        margin: 0px 200px;\r\n    }\r\n    @media ${media.lg} {\r\n        margin: 0px 320px;\r\n    }\r\n`;\r\n\r\nconst GridExtended = styled.div`\r\n    padding: 0px 10px;\r\n    @media ${media.sm} {\r\n        margin: 0px 100px;\r\n    }\r\n    @media ${media.md} {\r\n        margin: 0px 150px;\r\n    }\r\n    @media ${media.lg} {\r\n        margin: 0px 250px;\r\n    }\r\n`;\r\n\r\nexport { GridBasic, GridExtended };\r\n","import React, { FC, useEffect } from \"react\";\r\nimport { GridBasic, GridExtended } from \"./styles\";\r\ninterface SimpleGridProps {\r\n    type?: string;\r\n    children: any;\r\n}\r\n\r\nconst SimpleGrid: FC<SimpleGridProps> = ({ type, children }) => {\r\n    return (\r\n        <>\r\n            {type === \"simple\" && <GridBasic>{children}</GridBasic>}\r\n            {type === \"extended\" && <GridExtended>{children}</GridExtended>}\r\n        </>\r\n    );\r\n};\r\nSimpleGrid.defaultProps = {\r\n    type: \"simple\",\r\n};\r\nexport default SimpleGrid;\r\n","import styled from \"styled-components\";\r\n\r\nconst EmptyStyled = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 25px 0px;\r\n    flex-direction: column;\r\n    background-color: rgba(255,255,255,0.5);\r\n`;\r\nconst EmptyStrong = styled.span`\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    display: block;\r\n    opacity : 0.7;\r\n`;\r\nconst EmptyMessage = styled.span`\r\n    display: block;\r\n    font-size: 15px;\r\n    opacity: 0.6;\r\n    margin-top: 5px;\r\n`;\r\n\r\nexport { EmptyStyled, EmptyStrong, EmptyMessage };\r\n","import React, { FC } from \"react\";\r\nimport { EmptyStyled, EmptyStrong, EmptyMessage } from \"./styles\";\r\ninterface EmptyDisplayProps {\r\n    dayName: string;\r\n}\r\nconst EmptyDisplay: FC<EmptyDisplayProps> = ({ dayName }) => {\r\n    return (\r\n        <EmptyStyled>\r\n            <EmptyStrong>No tasks yet for {dayName}</EmptyStrong>\r\n            <EmptyMessage>Click the blue button to add tasks</EmptyMessage>\r\n        </EmptyStyled>\r\n    );\r\n};\r\n\r\nexport default EmptyDisplay;\r\n","import { getDateFromKeyword } from \"./getDateFromKeyword\";\r\nconst filterTasks = (tasks: any[], time: string) => {\r\n    const date = getDateFromKeyword(time);\r\n\r\n    const tasksFiltered = tasks.filter((item) => {\r\n        const splitedDate = item.date.split(\"/\");\r\n        const taskDate = new Date(\r\n            `${splitedDate[2]}-${splitedDate[1]}-${splitedDate[0]}`\r\n        );\r\n\r\n        if (\r\n            date.getDate() === taskDate.getDate() &&\r\n            date.getMonth() === taskDate.getMonth() &&\r\n            date.getFullYear() === taskDate.getFullYear()\r\n        ) {\r\n            return item;\r\n        }\r\n    });\r\n    \r\n    return tasksFiltered\r\n};\r\n\r\nexport { filterTasks };\r\n","const getDateFromKeyword = (keyword: string) => {\r\n    const today = new Date();\r\n    switch (keyword) {\r\n        case \"today\":\r\n            return today;\r\n        case \"tomorrow\":\r\n            return new Date(\r\n                `${today.getFullYear()}-${today.getMonth()+1}-${\r\n                    today.getDate() + 1\r\n                }`\r\n            );\r\n        default:\r\n            throw new Error(\"Keyword type error\");\r\n    }\r\n};\r\n\r\nexport { getDateFromKeyword };\r\n","import React, { useState, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { RootState } from \"../../reducers\";\nimport Header from \"../../modules/Header/Header\";\nimport Heading from \"../../components/Heading/Heading\";\nimport TodoListItem from \"../../components/TodoListItem/TodoListItem\";\nimport ModalAdd from \"../../modules/ModalAdd/ModalAdd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport GridSimple from \"../../components/SimpleGrid/SimpleGrid\";\nimport EmptyDisplay from \"../../components/EmptyDisplay/EmptyDisplay\";\nimport { Task } from \"../../reducers/tasksReducer\";\nimport { filterTasks } from \"../../helpers/filterTasks\";\nconst App = () => {\n    const dispatch = useDispatch();\n    const tasks = useSelector((state: RootState) => state.tasksReducer.tasks);\n    const visibleModal = useSelector(\n        (state: RootState) => state.uiReducer.showModalAdd\n    );\n    const addTask = (task: string) => {\n        dispatch({ type: \"ADD_TASK\", payload: task });\n    };\n\n    const drawTodayTasks = () => {\n        let temp: any[] = [];\n        const todayTasks: any[] = filterTasks(tasks, \"today\");\n        todayTasks.map((task) => {\n            temp.push(\n                <TodoListItem\n                    id={task.id}\n                    text={task.text}\n                    completed={task.isCompleted}\n                    date={task.date}\n                    estimated={task.estimated}\n                />\n            );\n        });\n        if (temp.length === 0) return <EmptyDisplay dayName=\"today\" />;\n        return temp;\n    };\n    const drawTomorrowTasks = () => {\n        let temp: any[] = [];\n        const todayTasks: any[] = filterTasks(tasks, \"tomorrow\");\n        todayTasks.map((task) => {\n            temp.push(\n                <TodoListItem\n                    id={task.id}\n                    text={task.text}\n                    completed={task.isCompleted}\n                    date={task.date}\n                    estimated={task.estimated}\n                />\n            );\n        });\n        if (temp.length === 0) return <EmptyDisplay dayName=\"tomorrow\" />;\n        return temp;\n    };\n    return (\n        <div className=\"App\">\n            <Helmet>\n                <link\n                    rel=\"stylesheet\"\n                    type=\"text/css\"\n                    href=\"https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;700&display=swap\"\n                />\n            </Helmet>\n            <GridSimple\n                children={\n                    <>\n                        <Header addTask={addTask} />\n                        <Heading type=\"h2\" children=\"Today\"></Heading>\n                        {drawTodayTasks()}\n                        <Heading type=\"h2\" children=\"Tomorrow\"></Heading>\n                        {drawTomorrowTasks()}\n                    </>\n                }\n            ></GridSimple>{\" \"}\n            <ModalAdd visible={visibleModal} />\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Home from './pages/Home/Home';\nconst App = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n            </Switch>\n        </Router>\n    );\n};\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyles = createGlobalStyle`\n    body, html{\n        border : 0;\n        margin :0;\n        padding: 0;\n    }\n    body{\n        height: 100%;\n        background: #FAF9FA;\n        color: #000000;\n        -webkit-transition: background-color 0.5s linear;\n        -moz-transition:  background-color 0.5s linear;\n        -o-transition: background-color 0.5s linear;\n        transition:  background-color 0.5s linear;\n    }    \n    *{\n        font-family: 'DM Sans', sans-serif;\n    }\n    [contenteditable][placeholder]:empty:before {\n        content: attr(placeholder);\n        position: absolute;\n        color: rgba(55,53,47,0.4);\n        background-color: transparent;\n    }\n`;\nexport default GlobalStyles;\n","export interface Task {\n    id: number;\n    text: string;\n    isCompleted: boolean;\n    date: string;\n    estimated: number;\n}\n\nexport interface TasksState {\n    tasks: Array<Task>;\n}\nconst initialState = {\n    tasks: [],\n};\n\ntype Action = {\n    type: \"ADD_TASK\" | \"UPDATE_TASK\";\n    payload: Task;\n};\nexport const tasksReducer = (\n    state: TasksState = initialState,\n    action: Action\n) => {\n    switch (action.type) {\n        case \"ADD_TASK\":\n            return { ...state, tasks: [...state.tasks, action.payload] };\n        case \"UPDATE_TASK\":\n            const tasks: Array<Task> = state.tasks.map((task) => {\n                if (task.id === action.payload.id) {\n                    const updatedTask: Task = Object.assign(\n                        {},\n                        task,\n                        action.payload\n                    );\n                    return updatedTask;\n                }\n                return task;\n            });\n\n            return { ...state, tasks: tasks };\n        default:\n            return state;\n    }\n};\n","export interface UiState {\n    showModalAdd: boolean;\n    showModalDate: boolean;\n}\nconst initialStateUi = {\n    showModalAdd: false,\n    showModalDate: false,\n};\n\ntype Action = {\n    type: \"SHOW_MODAL_ADD\" | \"SHOW_MODAL_DATE\";\n    payload: boolean;\n};\nexport const uiReducer = (state: UiState = initialStateUi, action: Action) => {\n    switch (action.type) {\n        case \"SHOW_MODAL_ADD\":\n            return { ...state, showModalAdd: action.payload };\n        case \"SHOW_MODAL_DATE\":\n                return { ...state, showModalDate: action.payload };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from \"redux\";\n\nimport { tasksReducer } from \"./tasksReducer\";\nimport { uiReducer } from \"./uiReducer\";\n\nexport const rootReducer = combineReducers({ uiReducer, tasksReducer });\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"../reducers\";\n\nexport const store = createStore(rootReducer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport GlobalStyles from \"./styles/GlobalStyles\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./stores/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <GlobalStyles />\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}